html(lang="pt-BR")
  head
    meta(charset="UTF-8")
    title Mapa SafeStreet
    // Bootstrap CSS
    link(
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css",
      rel="stylesheet"
    )
    // Leaflet CSS
    link(
      rel="stylesheet",
      href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css",
      crossorigin=""
    )
    // Leaflet Routing Machine CSS
    link(
      rel="stylesheet",
      href="https://unpkg.com/leaflet-routing-machine@3.2.12/dist/leaflet-routing-machine.css"
    )
    // Fonte Inter
    link(rel="stylesheet", href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap")
    
    style.
      :root {
        --azul-escuro: #003366;
        --azul-claro: #7d9ef7;
        --texto-primario: #002147;
        --fundo-claro: #ffffff;
        --fundo-cinza: #f4f4f4;
        --cinza-medio: gainsboro;
        --dourado: #c9b037;
        --dourado-claro: #e6d28c;
        --dourado-escuro: #b8860b;
        --border-radius: 8px;
        --shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);
        --transition: all 0.3s ease;
        
        /* Cores para as rotas */
        --rota-segura: #003366;
        --rota-alerta: #FFA500;
        --rota-perigo: #FF0000;
        --rota-segura-dark: #7d9ef7;
        --rota-alerta-dark: #FFC107;
        --rota-perigo-dark: #FF5252;
      }
      
      body {
        font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        margin: 0;
        padding: 0;
        transition: var(--transition);
      }

      label.form-label {
        color: #ffffff;
        font-weight: 500;
        margin-bottom: 0;
      }
      
      .form-control {
        border-radius: var(--border-radius);
        border: 1px solid var(--azul-claro);
        padding: 0.375rem 0.75rem;
        font-size: 0.9rem;
      }
      
      .form-control:focus {
        border-color: var(--azul-claro);
        box-shadow: 0 0 0 0.25rem rgba(125, 158, 247, 0.25);
      }

      /* Estilos de botões idênticos ao site principal */
      .btn {
        border-radius: var(--border-radius);
        padding: 0.375rem 0.75rem;
        font-weight: 500;
        transition: var(--transition);
        font-size: 0.9rem;
        text-transform: none;
        letter-spacing: normal;
        display: inline-flex;
        align-items: center;
        justify-content: center;
        gap: 0.5rem;
      }
      
      .btn-primary {
        background-color: var(--azul-escuro);
        border-color: var(--azul-escuro);
        color: white;
      }
      
      .btn-primary:hover {
        background-color: #002855;
        border-color: #002855;
      }
      
      .btn-outline-info {
        color: white;
        border-color: var(--azul-claro);
        background-color: transparent;
      }
      
      .btn-outline-info:hover {
        background-color: var(--azul-claro);
        color: white;
        border-color: var(--azul-claro);
      }
      
      .btn-outline-success {
        color: white;
        border-color: #10b981;
        background-color: transparent;
      }
      
      .btn-outline-success:hover {
        background-color: #10b981;
        color: white;
        border-color: #10b981;
      }
      
      .btn-success {
        background-color: #10b981;
        border-color: #10b981;
        color: white;
      }
      
      .btn-success:hover {
        background-color: #0d9668;
        border-color: #0d9668;
      }
      
      .btn-dark {
        background-color: var(--azul-claro);
        border-color: var(--azul-claro);
        color: white;
      }
      
      .btn-dark:hover {
        background-color: var(--azul-escuro);
        border-color: var(--azul-escuro);
      }

      .container-fluid {
        background-color: var(--azul-escuro);
        box-shadow: var(--shadow);
        padding: 0.75rem 0;
      }

      #map {
        height: 90vh;
        width: 100%;
        position: relative;
      }

      #latitude, #longitude,
      label[for="latitude"], label[for="longitude"] {
        display: none;
      }
      
      #toggle-dark {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.25rem;
        padding: 0;
        background-color: var(--azul-claro);
        border-color: var(--azul-claro);
        color: white;
      }
      
      #toggle-dark:hover {
        background-color: var(--azul-escuro);
        border-color: var(--azul-escuro);
      }
      
      /* Estilos para o sistema de rotas */
      .route-controls {
        background-color: rgba(255, 255, 255, 0.9);
        border-radius: var(--border-radius);
        padding: 15px;
        position: absolute;
        top: 10px;
        right: 10px;
        z-index: 1000;
        width: 300px;
        box-shadow: var(--shadow);
      }
      
      .route-controls h4 {
        color: var(--azul-escuro);
        margin-top: 0;
        margin-bottom: 15px;
        font-size: 1.1rem;
        font-weight: 600;
      }
      
      .route-controls .form-group {
        margin-bottom: 10px;
      }
      
      .route-controls label {
        color: var(--texto-primario);
        font-weight: 500;
        font-size: 0.9rem;
        margin-bottom: 5px;
        display: block;
      }
      
      .route-controls .btn {
        margin-top: 10px;
        width: 100%;
      }
      
      .route-controls .btn-close-panel {
        position: absolute;
        top: 10px;
        right: 10px;
        background: none;
        border: none;
        font-size: 1.2rem;
        cursor: pointer;
        color: var(--texto-primario);
        padding: 0;
        width: auto;
        height: auto;
      }
      
      /* Resultados de pesquisa de endereço */
      .address-results {
        margin-top: 10px;
        max-height: 150px;
        overflow-y: auto;
      }
      
      .address-item {
        padding: 8px;
        border-bottom: 1px solid #eee;
        cursor: pointer;
      }
      
      .address-item:hover {
        background-color: #f5f5f5;
      }
      
      .address-item:last-child {
        border-bottom: none;
      }
      
      /* Legenda da rota */
      .route-legend {
        position: absolute;
        bottom: 20px;
        right: 20px;
        background-color: rgba(255, 255, 255, 0.9);
        padding: 10px;
        border-radius: var(--border-radius);
        box-shadow: var(--shadow);
        z-index: 1000;
      }
      
      .route-legend h5 {
        margin-top: 0;
        margin-bottom: 10px;
        font-size: 0.9rem;
        font-weight: 600;
        color: var(--texto-primario);
      }
      
      .legend-item {
        display: flex;
        align-items: center;
        margin-bottom: 5px;
      }
      
      .legend-color {
        width: 20px;
        height: 5px;
        margin-right: 8px;
      }
      
      .legend-text {
        font-size: 0.8rem;
        color: var(--texto-primario);
      }
      
      /* Modo escuro */
      body.dark-mode {
        background-color: #121212;
        color: #f0f0f0;
      }

      body.dark-mode .container-fluid {
        background-color: #1e1e1e;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
      }

      body.dark-mode .form-control {
        background-color: #333;
        border-color: #444;
        color: #e0e0e0;
      }
      
      body.dark-mode .form-control:focus {
        border-color: var(--dourado);
        box-shadow: 0 0 0 0.25rem rgba(201, 176, 55, 0.25);
      }
      
      /* Botões no modo escuro */
      body.dark-mode .btn-primary {
        background-color: #1e1e1e;
        border-color: var(--dourado);
        color: #e0e0e0;
      }
      
      body.dark-mode .btn-primary:hover {
        background-color: var(--dourado);
        border-color: var(--dourado-escuro);
        color: #121212;
      }
      
      body.dark-mode .btn-outline-info {
        border-color: var(--dourado);
        color: #e0e0e0;
        background-color: transparent;
      }
      
      body.dark-mode .btn-outline-info:hover {
        background-color: var(--dourado);
        border-color: var(--dourado-escuro);
        color: #121212;
      }
      
      body.dark-mode .btn-outline-success {
        border-color: var(--dourado);
        color: #e0e0e0;
        background-color: transparent;
      }
      
      body.dark-mode .btn-outline-success:hover {
        background-color: var(--dourado);
        border-color: var(--dourado-escuro);
        color: #121212;
      }
      
      body.dark-mode .btn-success {
        background-color: var(--dourado);
        border-color: var(--dourado-escuro);
        color: #121212;
      }
      
      body.dark-mode .btn-success:hover {
        background-color: var(--dourado-escuro);
        border-color: var(--dourado-escuro);
      }
      
      body.dark-mode .btn-dark {
        background-color: #333;
        border-color: #444;
        color: #e0e0e0;
      }
      
      body.dark-mode .btn-dark:hover {
        background-color: var(--dourado);
        border-color: var(--dourado-escuro);
        color: #121212;
      }
      
      body.dark-mode #toggle-dark {
        background-color: #333;
        border-color: #444;
      }
      
      body.dark-mode #toggle-dark:hover {
        background-color: var(--dourado);
        border-color: var(--dourado-escuro);
        color: #121212;
      }
      
      /* Modo escuro para o sistema de rotas */
      body.dark-mode .route-controls {
        background-color: rgba(30, 30, 30, 0.9);
      }
      
      body.dark-mode .route-controls h4 {
        color: #e0e0e0;
      }
      
      body.dark-mode .route-controls label {
        color: #e0e0e0;
      }
      
      body.dark-mode .route-controls .btn-close-panel {
        color: #e0e0e0;
      }
      
      body.dark-mode .address-item {
        border-color: #444;
        color: #e0e0e0;
      }
      
      body.dark-mode .address-item:hover {
        background-color: #333;
      }
      
      /* Modo escuro para a legenda */
      body.dark-mode .route-legend {
        background-color: rgba(30, 30, 30, 0.9);
      }
      
      body.dark-mode .route-legend h5 {
        color: #e0e0e0;
      }
      
      body.dark-mode .legend-text {
        color: #e0e0e0;
      }
      
      /* Responsividade */
      @media (max-width: 768px) {
        .route-controls {
          width: calc(100% - 20px);
          left: 10px;
          right: 10px;
        }
        
        .route-legend {
          left: 20px;
          right: 20px;
          bottom: 10px;
        }
      }


  body
    .container-fluid.py-3
      .row.g-3.align-items-center.justify-content-start.px-3
        .col-md-auto
          img(src="img/LogoCnome.png", alt="Logo Safe Street" width="70")
        .col-md-auto
          label.form-label(for="distance") Distância (metros):
          input.form-control(type="number", id="distance", value="10000")
        .col-md-auto
          label.form-label(for="latitude") Latitude:
          input.form-control(type="text", id="latitude", value="-23.5667456", readonly)
        .col-md-auto
          label.form-label(for="longitude") Longitude:
          input.form-control(type="text", id="longitude", value="-46.6550784", readonly)
        .col-md-auto
          a(href="/")
            button.btn.btn-outline-info.ms-1 Ir para o site  
        //-.col-md-auto
          button.btn.btn-primary(onclick="buscarPontos()") Buscar
        .col-md-auto
          a(href="/add")
            button.btn.btn-outline-success.ms-1 Add por Cep
        .col-md-auto
          a(href="/geocode")
            button.btn.btn-outline-info.ms-1 Add por Endereço
        .col-md-auto    
          button.btn.btn-success(ms-1, onclick="getLocation()") Capturar Localização
        .col-md-auto
          button#toggle-dark.btn.btn-dark(title="Alternar modo escuro") 🌙
        .col-md-auto
          button#show-route.btn.btn-primary(title="Calcular Rota") 🗺️ Rotas

    #map
    
    // Painel de controle de rotas (inicialmente oculto)
    #route-controls.route-controls(style="display: none;")
      button.btn-close-panel(type="button", aria-label="Fechar") ×
      h4 Calcular Rota
      .form-group
        label(for="route-from") Origem:
        input.form-control#route-from(type="text", placeholder="Digite o endereço de origem")
        #from-results.address-results(style="display: none;")
      .form-group
        label(for="route-to") Destino:
        input.form-control#route-to(type="text", placeholder="Digite o endereço de destino")
        #to-results.address-results(style="display: none;")
      button.btn.btn-primary#calculate-route(type="button") Calcular Rota
      button.btn.btn-outline-info#clear-route(type="button", style="margin-top: 5px;") Limpar Rota
      button.btn.btn-outline-success#use-current-location(type="button", style="margin-top: 5px;") Usar Minha Localização
    
    // Legenda da rota (inicialmente oculta)
    #route-legend.route-legend(style="display: none;")
      h5 Legenda da Rota
      .legend-item
        .legend-color(style="background-color: var(--rota-segura);")
        .legend-text Área Segura
      .legend-item
        .legend-color(style="background-color: var(--rota-alerta);")
        .legend-text Área de Alerta
      .legend-item
        .legend-color(style="background-color: var(--rota-perigo);")
        .legend-text Área de Risco

    // Scripts
    script(src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js", crossorigin="")
    script(src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js")
    script(src="https://unpkg.com/@turf/turf@6/turf.min.js")
    script.
      let map = L.map('map', {
        zoomControl: false,
        scrollWheelZoom: false,
        doubleClickZoom: false,
        touchZoom: false
      });
      
      const toggle = document.getElementById('toggle-dark');
      const body = document.body;

      if (localStorage.getItem('modo') === 'dark') {
        body.classList.add('dark-mode');
        toggle.textContent = '☀️';
      }

      toggle.addEventListener('click', () => {
        body.classList.toggle('dark-mode');
        const isDark = body.classList.contains('dark-mode');
        toggle.textContent = isDark ? '☀️' : '🌙';
        localStorage.setItem('modo', isDark ? 'dark' : 'light');
      });

      let markersGroup = L.layerGroup().addTo(map);
      let routeLayer = L.layerGroup().addTo(map);
      
      const alertIcon = L.divIcon({});

      // Definir estilos de mapa diferentes para modo claro e escuro
      const lightTileLayer = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors',
      });
      
      const darkTileLayer = L.tileLayer('https://{s}.basemaps.cartocdn.com/dark_all/{z}/{x}/{y}{r}.png', {
        attribution: '&copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, &copy; <a href="https://carto.com/attributions">CARTO</a>',
      });
      
      // Inicialmente, use o mapa claro ou escuro com base no modo atual
      if (body.classList.contains('dark-mode')) {
        darkTileLayer.addTo(map);
      } else {
        lightTileLayer.addTo(map);
      }
      
      // Alternar camadas do mapa quando o modo escuro é alternado
      toggle.addEventListener('click', () => {
        const isDark = body.classList.contains('dark-mode');
        if (isDark) {
          map.removeLayer(lightTileLayer);
          darkTileLayer.addTo(map);
        } else {
          map.removeLayer(darkTileLayer);
          lightTileLayer.addTo(map);
        }
      });

      let userMarker = null;
      let userCircle = null;
      let userLocation = null;
      let fromCoords = null;
      let toCoords = null;
      let riskAreas = []; // Array para armazenar áreas de risco

      function getLocation() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            const latitude = position.coords.latitude;
            const longitude = position.coords.longitude;
            
            // Armazenar a localização do usuário
            userLocation = L.latLng(latitude, longitude);

            document.getElementById('latitude').value = latitude;
            document.getElementById('longitude').value = longitude;

            map.setView([latitude, longitude], 16);

            // Remove o marcador anterior se existir
            if (userMarker) {
              map.removeLayer(userMarker);
            }

            // Adiciona marcador do usuário
            userMarker = L.circleMarker([latitude, longitude], {
              radius: 10,
              fillColor: '#007bff',
              color: '#ffffff',
              weight: 2,
              opacity: 1,
              fillOpacity: 0.8
            }).addTo(map);

            // Adiciona círculo ao redor
            userCircle = L.circle([latitude, longitude], {
              radius: 50, //metros
              weight: 0.1,
              fillColor: '#337aff',
              fillOpacity: 0.5,
            }).addTo(map);

            buscarPontos();

          }, function(error) {
            alert("Erro ao obter localização: " + error.message);
          });
        } else {
          alert("Geolocalização não é suportada neste navegador.");
        }
      }

      function buscarPontos() {
        const distancia = document.getElementById('distance').value;
        const lat = parseFloat(document.getElementById('latitude').value);
        const lng = parseFloat(document.getElementById('longitude').value);

        markersGroup.clearLayers();
        riskAreas = []; // Limpar áreas de risco anteriores

        fetch(`/api/search?maxDistance=${distancia}&lat=${lat}&lng=${lng}`)
          .then(response => response.json())
          .then(data => {
            data.forEach(point => {
              const [lng, lat] = point.location.coordinates;
              const name = point.name || 'Sem nome';

              // Determinar o nível de risco com base na contagem
              const isHighRisk = point.count > 1;
              const fillColor = isHighRisk ? 'red' : 'yellow';
              const color = isHighRisk ? 'red' : 'orange';
              const riskLevel = isHighRisk ? 'high' : 'medium';
              
              // Raio do círculo baseado na contagem
              const radius = 40 + point.count;

              const circle = L.circleMarker([lat, lng], {
                radius: radius,
                weight: 1.2,
                color: color,
                fillColor: fillColor,
                fillOpacity: 0.4
              }).bindPopup(`<b>${name}</b><br>Contagem: ${point.count}`);

              markersGroup.addLayer(circle);
              
              // Armazenar informações da área de risco para uso posterior
              riskAreas.push({
                center: [lat, lng],
                radius: radius,
                riskLevel: riskLevel
              });
            });
          })
          .catch(error => {
            console.error('Erro ao buscar dados:', error);
            alert('Erro ao buscar pontos. Verifique o console.');
          });
      }
      
      // Sistema de Rotas
      
      // Função para mostrar/ocultar o painel de rotas
      document.getElementById('show-route').addEventListener('click', function() {
        const routeControls = document.getElementById('route-controls');
        routeControls.style.display = routeControls.style.display === 'none' ? 'block' : 'none';
      });
      
      // Fechar o painel de rotas
      document.querySelector('.btn-close-panel').addEventListener('click', function() {
        document.getElementById('route-controls').style.display = 'none';
      });
      
      // Usar localização atual como origem
      document.getElementById('use-current-location').addEventListener('click', function() {
        if (userLocation) {
          // Usar as coordenadas atuais como origem
          fromCoords = userLocation;
          document.getElementById('route-from').value = `Minha localização atual (${userLocation.lat.toFixed(6)}, ${userLocation.lng.toFixed(6)})`;
        } else {
          alert("Localização atual não disponível. Clique em 'Capturar Localização' primeiro.");
        }
      });
      
      // Função para buscar endereços usando a API de geocodificação
      function searchAddress(query, resultContainer, isOrigin) {
        if (query.length < 3) {
          document.getElementById(resultContainer).style.display = 'none';
          return;
        }
        
        fetch(`/api/search/geocode?query=${encodeURIComponent(query)}`)
          .then(response => response.json())
          .then(data => {
            const resultsContainer = document.getElementById(resultContainer);
            resultsContainer.innerHTML = '';
            
            if (data.length > 0) {
              data.forEach(place => {
                const item = document.createElement('div');
                item.className = 'address-item';
                item.textContent = place.address_formatted || place.address;
                
                item.addEventListener('click', function() {
                  const coords = L.latLng(place.geometry.lat, place.geometry.lng);
                  
                  if (isOrigin) {
                    fromCoords = coords;
                    document.getElementById('route-from').value = place.address_formatted || place.address;
                  } else {
                    toCoords = coords;
                    document.getElementById('route-to').value = place.address_formatted || place.address;
                  }
                  
                  resultsContainer.style.display = 'none';
                });
                
                resultsContainer.appendChild(item);
              });
              
              resultsContainer.style.display = 'block';
            } else {
              resultsContainer.style.display = 'none';
            }
          })
          .catch(error => {
            console.error('Erro ao buscar endereços:', error);
          });
      }
      
      // Adicionar eventos de input para busca de endereços
      let fromTimeout = null;
      document.getElementById('route-from').addEventListener('input', function(e) {
        clearTimeout(fromTimeout);
        fromTimeout = setTimeout(() => {
          searchAddress(e.target.value, 'from-results', true);
        }, 500);
      });
      
      let toTimeout = null;
      document.getElementById('route-to').addEventListener('input', function(e) {
        clearTimeout(toTimeout);
        toTimeout = setTimeout(() => {
          searchAddress(e.target.value, 'to-results', false);
        }, 500);
      });
      
      // Função para verificar se um ponto está dentro de uma área de risco
      function checkPointInRiskArea(point) {
        // Ponto no formato [lat, lng]
        let highestRisk = null;
        
        for (const area of riskAreas) {
          const distance = L.latLng(area.center).distanceTo(L.latLng(point[0], point[1]));
          
          // Se o ponto estiver dentro do raio da área de risco
          if (distance <= area.radius * 10) { // Multiplicamos por 10 para converter o raio visual para metros aproximados
            // Se ainda não temos um risco ou se este é maior que o anterior
            if (!highestRisk || (area.riskLevel === 'high' && highestRisk !== 'high')) {
              highestRisk = area.riskLevel;
            }
          }
        }
        
        return highestRisk;
      }
      
      // Função para dividir a rota em segmentos baseados no nível de risco
      function createColoredRouteSegments(routeCoordinates) {
        const segments = [];
        let currentSegment = {
          coordinates: [routeCoordinates[0]],
          riskLevel: checkPointInRiskArea(routeCoordinates[0]) || 'safe'
        };
        
        for (let i = 1; i < routeCoordinates.length; i++) {
          const point = routeCoordinates[i];
          const riskLevel = checkPointInRiskArea(point) || 'safe';
          
          if (riskLevel === currentSegment.riskLevel) {
            // Continuar o segmento atual
            currentSegment.coordinates.push(point);
          } else {
            // Finalizar o segmento atual e iniciar um novo
            segments.push(currentSegment);
            currentSegment = {
              coordinates: [point],
              riskLevel: riskLevel
            };
          }
        }
        
        // Adicionar o último segmento
        segments.push(currentSegment);
        
        return segments;
      }
      
      // Função para obter a cor com base no nível de risco e modo (claro/escuro)
      function getColorByRiskLevel(riskLevel) {
        const isDark = body.classList.contains('dark-mode');
        
        if (riskLevel === 'high') {
          return isDark ? 'var(--rota-perigo-dark)' : 'var(--rota-perigo)';
        } else if (riskLevel === 'medium') {
          return isDark ? 'var(--rota-alerta-dark)' : 'var(--rota-alerta)';
        } else {
          return isDark ? 'var(--rota-segura-dark)' : 'var(--rota-segura)';
        }
      }
      
      // Calcular e desenhar a rota
      document.getElementById('calculate-route').addEventListener('click', function() {
        if (!fromCoords || !toCoords) {
          alert("Por favor, selecione endereços válidos para origem e destino.");
          return;
        }
        
        // Limpar rota anterior
        routeLayer.clearLayers();
        
        // Adicionar marcadores de origem e destino
        const startMarker = L.circleMarker(fromCoords, {
          radius: 8,
          fillColor: 'green',
          color: 'white',
          weight: 2,
          opacity: 1,
          fillOpacity: 0.8
        }).addTo(routeLayer);
        
        const endMarker = L.circleMarker(toCoords, {
          radius: 8,
          fillColor: 'red',
          color: 'white',
          weight: 2,
          opacity: 1,
          fillOpacity: 0.8
        }).addTo(routeLayer);
        
        // Calcular rota usando a API do OpenStreetMap (OSRM)
        const routeUrl = `https://router.project-osrm.org/route/v1/driving/${fromCoords.lng},${fromCoords.lat};${toCoords.lng},${toCoords.lat}?overview=full&geometries=geojson`;
        
        fetch(routeUrl)
          .then(response => response.json())
          .then(data => {
            if (data.routes && data.routes.length > 0) {
              const route = data.routes[0];
              const routeCoordinates = route.geometry.coordinates.map(coord => [coord[1], coord[0]]);
              
              // Dividir a rota em segmentos baseados no nível de risco
              const segments = createColoredRouteSegments(routeCoordinates);
              
              // Desenhar cada segmento com a cor apropriada
              segments.forEach(segment => {
                const color = getColorByRiskLevel(segment.riskLevel);
                
                const routeLine = L.polyline(segment.coordinates, {
                  color: color,
                  weight: 5,
                  opacity: 0.7
                }).addTo(routeLayer);
              });
              
              // Ajustar o mapa para mostrar toda a rota
              const routeBounds = L.polyline(routeCoordinates).getBounds();
              map.fitBounds(routeBounds, { padding: [50, 50] });
              
              // Mostrar informações da rota
              const distance = (route.distance / 1000).toFixed(2); // km
              const duration = Math.round(route.duration / 60); // minutos
              
              // Adicionar popup com informações da rota
              const midpoint = routeCoordinates[Math.floor(routeCoordinates.length / 2)];
              L.popup()
                .setLatLng(midpoint)
                .setContent(`<b>Distância:</b> ${distance} km<br><b>Tempo estimado:</b> ${duration} min`)
                .openOn(map);
              
              // Mostrar a legenda
              document.getElementById('route-legend').style.display = 'block';
              
              // Fechar o painel de rotas
              document.getElementById('route-controls').style.display = 'none';
            } else {
              alert("Não foi possível calcular a rota. Tente novamente com endereços diferentes.");
            }
          })
          .catch(error => {
            console.error('Erro ao calcular rota:', error);
            alert("Erro ao calcular a rota. Verifique o console para mais detalhes.");
          });
      });
      
      // Limpar rota
      document.getElementById('clear-route').addEventListener('click', function() {
        routeLayer.clearLayers();
        document.getElementById('route-from').value = '';
        document.getElementById('route-to').value = '';
        fromCoords = null;
        toCoords = null;
        document.getElementById('route-legend').style.display = 'none';
      });
      
      // Inicializar o mapa
      getLocation();